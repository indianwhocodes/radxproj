/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/////////////////////////////////////////////////////////////
// MdvInputPath.h
//
// Handling of input paths for MDV files into archive and
// realtime programs.
//
// There are two modes of operation, reflected by the two
// constructors.
//
// Archive mode:
//   The constructor passes in a list of MDV file paths.
//   This list is stored, and then the paths are served out
//   when next() is called. If next() returns NULL, the list
//   is exhausted.
//
// Realtime mode:
//   The constructor passes in an input directory to watch, as well as
//   as max valid age and a heartbeat function to be called while
//   waiting for new data to arrive. When next() is called, the
//   routine will watch the input directory for a new file. When
//   a new file arrives the path is returned by next(). If the
//   heartbeat_func is not NULL, it gets called every second while
//   next() is waiting for a file to arrive.
//
// Mike Dixon, RAP, NCAR, P.O.Box 3000, Boulder, CO, 80307-3000, USA
//
// March 1998
//
/////////////////////////////////////////////////////////////

#ifndef MdvInputPath_H
#define MdvInputPath_H

#include <toolsa/umisc.h>
#include <toolsa/ldata_info.h>
#include <toolsa/membuf.h>

// typedef for heartbeat function. If heartbeat_func is non-null,
// the client must provide a pointer to a function which fits this
// prototype. The label will be generated by this class prior
// to calling the heartbeat function.

typedef void (*MdvInput_heartbeat_t)(char *label);

class MdvInputPath {
  
public:

  /////////////////////////////
  // Constructor - Archive mode
  //
  // Pass in a list of file paths.
  //

  MdvInputPath (char *prog_name,
		int debug,
		int n_files,
		char **file_paths);
    
  /////////////////////////////
  // Constructor - Archive mode
  //
  // Pass in data directory and start and end times.
  //

  MdvInputPath (char *prog_name,
		int debug,
		char *input_dir,
		time_t start_time,
		time_t end_time);

  //////////////////////////////
  // Constructor - realtime mode
  //
  // Pass in (a) the input directory to be watched.
  //         (b) the max valid age for a realtime file (secs)
  //             the routine will wait for a file with the age
  //             less than this.
  //         (c) pointer to heartbeat_func. If NULL this is ignored.
  //             If non-NULL, this is called once per second while
  //             the routine is waiting for new data.
  
  MdvInputPath (char *prog_name,
		int debug,
		char *input_dir,
		int max_valid_age,
		MdvInput_heartbeat_t heartbeat_func);
  
  /////////////
  // destructor

  ~MdvInputPath();

  ////////////////
  // get next file

  char *next();

  /////////////////////////
  // reset to start of list
  // 
  // Archive mode only.

  void reset();

protected:
  
private:

  char *_inputDir;
  char *_progName;
  char **_filePaths;
  char _inputPath[MAX_PATH_LEN];
    
  int _archiveMode;
  int _nFiles;
  int _fileNum;
  int _maxAge;
  int _debug;

  MEMbuf *_mbufPaths;

  LDATA_handle_t _lastData;

  MdvInput_heartbeat_t _heartbeatFunc;

  void _loadDay(char *subdir_path,
		date_time_t *midday,
		time_t start_time,
		time_t end_time);

  static int _comparePaths(const void *v1, const void *v2);

};

#endif
