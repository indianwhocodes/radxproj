/*********************************************************
 * parameter definitions for RadxApRemoval
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * March 2014
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Reads a CfRadial volume, filters AP, writes out filtered volume.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "If set, only files with this extension will be processed.";
} search_ext;

commentdef {
  p_header = "OPTIONAL FIXED ANGLE OR SWEEP NUMBER LIMITS";
  p_text = "Fixed angles are elevation in PPI mode and azimuth in RHI mode.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "Only read sweeps within the specified sweep number limits.";
} set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} upper_sweep_num;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the radar number.";
  p_help = "See read_radar_num.";
} read_set_radar_num;

paramdef int {
  p_default = 0;
  p_descr = "Set the radar number for the data to be extracted.";
  p_help = "Most files have data from a single radar, so this does not apply. The NOAA HRD files, however, have data from both the lower fuselage (LF, radar_num = 1) and tail (TA, radar_num = 2) radars. For HRD files, by default the TA radar will be used, unless the radar num is set to 1 for the LF radar.";
} read_radar_num;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = true;
  p_descr = "Option to ignore data taken in IDLE mode.";
  p_help = "If true, on read will ignore files with an IDLE scan mode.";
} ignore_idle_scan_mode_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays for which all data is missing.";
  p_help = "If true, ray data will be checked. If all fields have missing data at all gates, the ray will be removed after reading.";
} remove_rays_with_all_data_missing;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays taken while the antenna was in transition.";
  p_help = "If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.";
} remove_rays_with_antenna_transitions;

paramdef int {
  p_default = 0;
  p_descr = "Number of transition rays to include as a margin";
  p_help =  "Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.";
} transition_nrays_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

commentdef {
  p_header = "OPTION TO OVERRIDE INSTRUMENT NAME";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the instrument name.";
  p_help = "If true, the name provided will be used.";
} override_instrument_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Instrument name.";
  p_help = "See override_instrument_name.";
} instrument_name;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

paramdef boolean {
  p_default = false;
  p_descr = "Option to negate the latitude.";
  p_help = "Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.";
} change_radar_latitude_sign;

commentdef {
  p_header = "INPUT DATA";
}

paramdef char* {
  p_descr = "Input URL for DsRadar data via FMQ";
  p_default = {"fmqp:://localhost::./fmq.dsRadar"};
} input_fmq_url;

paramdef string {
  p_descr = "Velocity field name";
  p_default = {"VEL"};
} vel_field_name;

paramdef string {
  p_descr = "Reflectivity field name";
  p_default = {"DBZ"};
} refl_field_name;

paramdef string {
  p_descr = "Spectrum Width field name";
  p_default = {"WIDTH"};
} sw_field_name;

paramdef boolean {
  p_descr = "Use terrain data?";
  p_default = {FALSE};
} use_terrain;

paramdef string {
  p_descr = "Terrain url";
  p_help = "Url for terrain data.  Must be cartesian data";
  p_default = {"mdvp:://localhost::./terrain.mdv"};
} terrain_url;

paramdef string {
  p_descr = "Terrain field name";
  p_help = "Field name for the field to use from the terrain file";
  p_default = "Elevation";
} terrain_field_name;

commentdef {
  p_header = "FILTERING PARAMETERS";
}

paramdef char* {
  p_default = { "DBZ", "VEL", "WIDTH" };
  p_descr = "Names of fields to be filtered";
  p_help = "List the names of the fields you want to be filtered";
} filter_field_names[];

typedef struct {
  double min_elev;
  double max_elev;
} filter_range_t;

paramdef struct filter_range_t {
  p_default = {0.0, 4.0};
  p_descr = "Elevation range for data that should be filtered";
  p_help = "Data from tilts not in this range will not be filtered";
} filter_range;

paramdef double {
  p_default = {250};
  p_descr = "Expected gate spacing in meters";
  p_help = "If gate spacing is different than this value, the tilt will "
           "be ignored";
} gate_spacing;

paramdef long {
  p_default = {1000};
  p_descr = "Maximum number of gates expected";
  p_help = "This is used to construct the terrain mask. "
           "It is also used for storing the beam data as it is received. "
           "The beam data is stored internally in buffers that have this "
           "number of gates. "
           "This allows us to handle radars that truncate beams in the higher "
           "tilts to save space. "
           "If a beam is encountered that has more than this number of gates, "
           "it will NOT be processed. "
           "So, you need to keep this number as low as possible to save "
           "memory, but not so low that beams will be skipped.";
} max_num_gates;

paramdef double {
  p_default = {1.0};
  p_descr = "Delta azimuth for filtering";
  p_help = "The internal representation of a given tilt will assume this "
           "delta azimuth";
} delta_azimuth;

typedef struct {
  double latitude;
  double longitude;
} radar_loc_t;

paramdef struct radar_loc_t {
  p_default = {0.0, 0.0};
  p_descr = "Latitude and longitude of radar";
} radar_location;

typedef struct {
  int azimuth_radius;
  int gate_radius;
} radius_info_t;

paramdef struct radius_info_t {
  p_default = { 2, 4 };
  p_descr = "Radius in azimuth and gates for area used in computation of "
            "interest fields related to the reflectivity field";
  p_help = "If the azimuth radius is set to 2 and the gate radius is "
           "set to 4, for example, the area used to compute the interest "
           "functions below will be a wedge in polar space consisting "
           "of the 45 gates that fall within 2 azimuths on each side "
           "of the given azimuth and 4 gates on each side of the given "
           "gate";
} dbz_radius_info;

paramdef struct radius_info_t {
  p_default = { 1, 1 };
  p_descr = "Radius in azimuth and gates for area used in computation of "
            "interest fields related to the velocity and spectral width "
            "fields";
  p_help = "If the azimuth radius is set to 2 and the gate radius is "
           "set to 4, for example, the area used to compute the interest "
           "functions below will be a wedge in polar space consisting "
           "of the 45 gates that fall within 2 azimuths on each side "
           "of the given azimuth and 4 gates on each side of the given "
           "gate";
} vel_radius_info;

typedef struct {
  double           x1;
  double           y1;
  double           x2;
  double           y2;
  double           x3;
  double           y3;
  double           x4;
  double           y4;
  double           x5;
  double           y5;
  double           x6;
  double           y6;
} range_weight_func_t;

paramdef struct range_weight_func_t {
  p_default = { 0, 1, 40, 1, 120, 0.75, 200, 0.5, 300, 0, 500, 0 };
  p_descr = "Range weight function";
  p_help = "Apply a range weight to given feature fields below according"
           " to this function.  X coordinates are given in km";
} range_weight_func;

typedef enum {
  TDBZ, GDZ, MVE, MSW, SDVE, SDSW, SPIN, SIGN, RGDZ, SRDZ, RSINZ
} interest_field_t;

typedef struct {
  interest_field_t interest_field;
  double           weight;
  double           x1;
  double           y1;
  double           x2;
  double           y2;
  double           x3;
  double           y3;
  double           x4;
  double           y4;
  double           x5;
  double           y5;
  double           x6;
  double           y6;
} interest_func_t;

paramdef struct interest_func_t {
  p_default = {
    { TDBZ, 1, -100, 0, 0, 0, 55, 1, 60, 1, 100, 1, 10000, 1},
    { GDZ, 1, -1000, 1, -100, 1, -15, 1, 0, 0, 50, 0, 100, 0},
    { MVE, 1, -50, 0, -30, 0, -2.3, 0, 0, 1, 2.3, 0, 50, 0},
    { MSW, 1, -50, 0, 0, 1, 5, 0, 10, 0, 20, 0, 50, 0},
    { SDVE, 1, -50, 0, 0, 1, 0.7, 0, 10, 0, 20, 0, 50, 0},
    { SDSW, 0, -50, 0, 0, 1, 0.7, 0, 10, 0, 20, 0, 50, 0},
    { SPIN, 1, -100, 0, -50, 0, 0, 0, 50, 1, 100, 0, 200, 0},
    { SIGN, 0, -10, 0, -0.3, 0, 0, 1, 0.3, 0, 10, 0, 50, 0},
    { RGDZ, 0, -1000, 1, -100, 1, -8, 1, 0, 0, 50, 0, 100, 0},
    { SRDZ, 0, -100, 1, -10, 1, 0, 0, 10, 1, 50, 1, 100, 1},
    { RSINZ, 1, -500, 1, -60, 1, -30, 0, 30, 0, 60, 1, 500, 1}
  };
  p_descr = "Interest function description for ap filtering";
} ap_interest_func[];

paramdef struct interest_func_t {
  p_default = {};
  p_descr = "Confidence function description for ap filtering";
} ap_confidence_func[];

paramdef struct interest_func_t {
  p_default = {
    { TDBZ, 1, -100, 0, 0, 0, 55, 1, 60, 1, 100, 1, 10000, 1},
    { GDZ, 1, -1000, 1, -100, 1, -15, 1, 0, 0, 50, 0, 100, 0},
    { MVE, 0, -50, 0, -30, 0, -5, 0, 0, 1, 5, 0, 50, 0},
    { MSW, 1, -50, 0, 0, 1, 6, 0, 10, 0, 20, 0, 50, 0},
    { SDVE, 1, -50, 0, 0, 1, 0.7, 0, 10, 0, 20, 0, 50, 0},
    { SDSW, 0, -50, 0, 0, 1, 0.7, 0, 10, 0, 20, 0, 50, 0},
    { SPIN, 1, -100, 0, -50, 0, 0, 0, 40, 0, 60, 1, 200, 1},
    { SIGN, 0, -10, 0, -0.6, 0, 0, 1, 0.6, 0, 10, 0, 50, 0},
    { RGDZ, 1, -1000, 1, -100, 1, -15, 1, 0, 0, 50, 0, 100, 0},
    { SRDZ, 0, -500, 1, -20, 1, 0, 0, 20, 1, 200, 1, 500, 1},
    { RSINZ, 1, -1000, 0, -80, 0, -20, 1, -10, 1, 0, 0, 1000, 0}
  };
  p_descr = "Interest function description for sea clutter filtering";
} sc_interest_func[];

paramdef struct interest_func_t {
  p_default = {};
  p_descr = "Confidence function description for sea clutter filtering";
} sc_confidence_func[];

paramdef struct interest_func_t {
  p_default = {
    { TDBZ, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { MVE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { SPIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { SIGN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  };
  p_descr = "Interest function description for precipitation filtering";
} p_interest_func[];

paramdef struct interest_func_t {
  p_default = {};
  p_descr = "Confidence function description for precipitation filtering";
} p_confidence_func[];

paramdef boolean {
  p_default = false;
  p_descr = "Flag indicating whether to filter out low dbz values when "
            "calculating the precip filter final interest value.";
} p_filter_low_dbz;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum dbz value to use when filtering low dbz values for the "
            "final precip interest value.";
  p_help = "Used only if p_filter_low_dbz is set to true.\n"
           "If set, the final precip interest value will be set to 0 "
           "anywhere the original dbz value is less than this value.";
} p_low_dbz_threshold;

paramdef double {
  p_default = {10.0}; 
  p_descr = "Distance for slant range gdz field";
} slant_range_dist;

typedef enum {
  LAND, WATER, ALL
} terrain_t;

paramdef enum terrain_t {
  p_default = {ALL};
  p_descr = "Where to filter AP";
  p_help = "This parameter tells us how to use the terrain data for AP "
           "removal.  If set to LAND, we will only filter data over the "
           "land.  If set to WATER, we will only filter data over the "
           "water.  If set to ALL, we will filter data everywhere, "
           "without reguard to the terrain data";
} ap_terrain_use_type;

paramdef enum terrain_t {
  p_default = {ALL};
  p_descr = "Where to filter sea clutter";
  p_help = "This parameter tells us how to use the terrain data for sea "
           "clutter removal.  If set to LAND, we will only filter data "
           "over the land.  If set to WATER, we will only filter data over "
           "the water.  If set to ALL, we will filter data everywhere, "
           "without reguard to the terrain data";
} sc_terrain_use_type;

paramdef enum terrain_t {
  p_default = {ALL};
  p_descr = "Where to filter precipitation";
  p_help = "This parameter tells us how to use the terrain data for "
           "precipitation removal.  If set to LAND, we will only filter data "
           "over the land.  If set to WATER, we will only filter data over "
           "the water.  If set to ALL, we will filter data everywhere, "
           "without reguard to the terrain data";
} p_terrain_use_type;

paramdef double {
  p_default = {2.0};
  p_descr = "Spin threshold for sea clutter";
  p_help = "Differences in reflectivity between adjacent gates will be "
           "counted for the spin calculation if they are greater than this "
           "value";
} sc_spin_threshold;

paramdef double {
  p_default = {11.0};
  p_descr = "Spin threshold for AP";
  p_help = "Differences in reflectivity between adjacent gates will be "
           "counted for the spin calculation if they are greater than this "
           "value";
} ap_spin_threshold;

paramdef double {
  p_default = {2.0};
  p_descr = "Spin threshold for precipitation";
  p_help = "Differences in reflectivity between adjacent gates will be "
           "counted for the spin calculation if they are greater than this "
           "value";
} p_spin_threshold;

paramdef double {
  p_default = {0.5};
  p_descr = "Interest threshold for AP removal";
  p_help = "A final interest value greater than this value will indicate "
           "the presence of ap";
} ap_interest_threshold;

paramdef double {
  p_default = {0.5};
  p_descr = "Interest threshold for sea clutter removal";
  p_help = "A final interest value greater than this value will indicate "
           "the presence of sea clutter";
} sc_interest_threshold;

paramdef double {
  p_default = {0.5};
  p_descr = "Interest threshold for precip removal";
  p_help = "A final interest value less than this value will indicate "
           "the presence of precipitation";
} p_interest_threshold;

paramdef boolean {
  p_default = {TRUE};
  p_descr = "Trigger filtering by the end of volume flag";
  p_help = "Filtering will always be triggered when two tilts are buffered "
           "and the next tilt starts coming in.  If this flag is set to "
           "TRUE, filtering will also be triggered when an end of volume "
           "flag is detected.  In this case, all remaining tilts in the "
           "volume will be filtered, if they are within the filtering "
           "range, and written out before the next volume is processed. "
           "Note that if you do not have a delay at the end of a volume, "
           "and you are filtering all the tilts in a volume, you may want "
           "to set this to FALSE to insure that beams are not dropped in "
           "the next scan";
} eov_trigger;

typedef enum
{
  APDA,
  SCDA,
  PDA
} filter_type_t;

typedef enum
{
  AND_FILTER,
  OR_FILTER
} filter_comb_type_t;

typedef struct
{
  filter_type_t filter_type;
  filter_comb_type_t comb_type;
} filter_comb_t;

paramdef struct filter_comb_t
{
  p_descr = "Parameter defining how to combine the filters when applying "
            "the final interest fields to the input fields.";
  p_help = "Filter types:\n"
           "\tAPDA - AP filter final interest field\n"
           "\tSCDA - Sea clutter filter final interest field\n"
           "\tPDA - Precipitation filter final interest field\n"
           "Combination type:\n"
           "\tAND_FILTER - The final interest field from this filter will "
           "be anded with the other filter fields when determining the "
           "final filtering\n"
           "\tOR_FILTER - The final interest field from this filter will "
           "be ored with the other filter fields when determining the "
           "final filtering\n"
           "The filters will be applied in the order specified."
           "The combination type specified for the first filter in the list "
           "will be ignored.\n"
           "Note that only the filters specified in this list will be "
           "calculated.";
  p_default = { { APDA, AND_FILTER },
                { SCDA, AND_FILTER },
                { PDA, AND_FILTER } };
} filter_combination[];

commentdef {
  p_header = "OPTION TO SPECIFY FIELD NAMES AND OUTPUT ENCODING";
}

paramdef boolean {
  p_default = false;
  p_descr = "Set the field names and output encoding";
  p_help = "If false, all fields will be used.";
} set_output_fields;

typedef enum {
  OUTPUT_ENCODING_ASIS,
  OUTPUT_ENCODING_FLOAT32,
  OUTPUT_ENCODING_INT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

typedef enum {
  SCALING_DYNAMIC,
  SCALING_SPECIFIED
} output_scaling_t;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string output_units;
  output_encoding_t encoding;
  output_scaling_t output_scaling;
  double output_scale;
  double output_offset;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    { "DBZ",
      "DBZ",
      "reflectivity",
      "equivalent_reflectivity_factor",
      "dBZ",
      OUTPUT_ENCODING_ASIS,
      SCALING_DYNAMIC, 0.01, 0.0
    },
    { "VEL", 
      "VEL", 
      "radial_velocity",
      "radial_velocity_of_scatterers_away_from_instrument",
      "m/s", 
      OUTPUT_ENCODING_ASIS,
      SCALING_DYNAMIC, 0.01, 0.0
    }
  };
  p_descr = "Output field details.";
  p_help = "Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long name or standard name are empty, the existing names are used. If SCALING_SPECIFIED, then the scale and offset is used.";
} output_fields[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out the unspecified fields as they are.";
  p_help = "If false, only the fields listed in output_fields will be written. If this is true, all other fields will be written unchanged.";
} write_other_fields_unchanged;

commentdef {
  p_header = "OPTION TO SPECIFY OUTPUT ENCODING FOR ALL FIELDS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to set output encoding for all fields";
} set_output_encoding_for_all_fields;

paramdef enum output_encoding_t {
  p_default = OUTPUT_ENCODING_ASIS;
  p_descr = "Output encoding for all fields, if requested.";
} output_encoding;

commentdef {
  p_header = "OUTPUT FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

commentdef {
  p_header = "OUTPUT OPTIONS FOR CfRadial FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the use of ragged arrays for CfRadial files.";
  p_help = "Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.";
} output_force_ngates_vary;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;




