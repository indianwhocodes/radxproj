/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1992 - 2010 */
/* ** University Corporation for Atmospheric Research(UCAR) */
/* ** National Center for Atmospheric Research(NCAR) */
/* ** Research Applications Laboratory(RAL) */
/* ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA */
/* ** 2010/10/7 23:11:39 */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

commentdef {
  p_header = "Program to automatically update a TDRP parameter file.\n"
	"Generally called from a script. See the READ.ME file.\n"
	"Niles Oien April 2006.";

}



paramdef boolean {
  p_descr = "Option to delete core files.";
  p_help = "May be useful."; 
  p_default = FALSE;
} deleteCoreFiles;
 

paramdef boolean {
  p_descr = "Option to make backup copies of param files before\n"
	"updating them. This is only done once, ie. the copy\n"
	"is not performed if the backup file already exists. That way\n"
	"this program can be run several times without overwriting\n"
	"backup files.";
  p_help = "May be useful. Bakup files have the\n"
	"extension .backUp and can be removed with a\n"
	"command like:\n\n"
	"find $PROJ_DIR -name \\*.backUp -exec /bin/rm -vf {} \\;\n"
	"which could be handy."; 
  p_default = FALSE;
} makeBackupCopies;
 
paramdef string {
  p_descr = "List of apps that we do not want to change param\n"
	"files for.";
  p_help = "There are various reasons for this. Some apps (CIDD, cronus) may\n"
	"have TDRP param files but not recognise the -print_params\n"
	"option. Others (Janitor, DsFileDist) are designed to have\n"
	"partial parameter files throughout the data tree, updating\n"
	"these to be full parameter files would be an error.\n"
	"And others (adjoint, adjoin_moist) are run by users who\n"
	"flat-out detest the full TDRP printout and want to avoid\n"
	"it if possible."; 
  p_default = { "CIDD", "cronus", "adjoint", "adjoint_moist", "Janitor", "DsFileDist"};
} leaveTheseAppsParamFilesAlone[];
 
typedef enum {
  UPDATE_NONE, UPDATE_NEW_PARAMS, UPDATE_ALL
} updateOption_t;

paramdef enum updateOption_t {
  p_default = UPDATE_NONE;
  p_descr = "Option to select level of param file updating.";
  p_help = "Options are :\n"
	"  UPDATE_NONE : Do no param file updating, just print\n"
	"      param file status to stderr. Updates can then be done\n"
	"      by hand.\n\n"
	"  UPDATE_NEW_PARAMS : Only update if the application has\n"
	"      new parameters that are being defaulted on in the existing\n"
	"      param file.\n\n"
	"  UPDATE_ALL : Update all param files except those on the\n"
	"      leaveTheseAppsParamFilesAlone list. May be useful if\n"
	"      application parameters have changed radically.\n"
	"      Destroys any comments in the param file that are\n"
	"      not generated by -print_params, however.";
} updateOption;

typedef struct {
  string matchName;
  string appName;	
} substitute_t;

paramdef struct substitute_t {
  p_descr = "List of substitutions to try if the app cannot\n"
	"be located using the param file naming convention.";
  p_help = "The idea here is to try to cope with at least\n"
	"some cases in which the param file does not follow\n"
	"the naming convention in which param file X.ext applies\n"
	"to the application X. The default setting is such that all\n"
	"param files that start with \"cronus-\" (for example\n"
	"cronus-advect_mcs.params, cronus-dry_line.params) will\n"
	"be matched to the application \"cronus\".\n\n"
	"Care should be taken when setting this parameter.\n"
	"If the match name were set to \"cronus\" instead of\n"
	"\"cronus-\" then param files for the app cronusPointSelect\n"
	"may be mapped erroneously to applying to the cronus app.\n\n"
	"It may be advisable to set this after running the program\n"
	"with UPDATE_NONE selected and seeing what the program\n"
	"would do if a more agressive scheme were invoked."; 
  p_default = {
	{ "cronus-", "cronus" }
	};
} substitutions[];
 
paramdef string {
  p_descr = "Option to use immediately after -print_params. Options\n"
	"are short, norm, long, verbose, short_expand, norm_expand,\n"
	"long_expand and verbos_expand.\n"
        "short:   main comments only, no help or descriptions\n"
        "        structs and arrays on a single line\n"
        "norm:    short + descriptions and help\n"
        "long:    norm  + arrays and structs expanded\n"
        "verbose: long  + private params included\n"
        "short_expand:   short with env vars expanded\n"
        "norm_expand:    norm with env vars expanded\n"
        "long_expand:    long with env vars expanded\n"
        "verbose_expand: verbose with env vars expanded\n"
        "We recommend the default, although most people use norm.";
  p_help = "Probably best not to expand environment variables."; 
  p_default = "long";
} printParamsOption;
 
