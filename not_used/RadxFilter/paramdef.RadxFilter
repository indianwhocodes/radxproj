/*********************************************************
 * parameter definitions for RadxFilter
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * June 2013
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "RadxFilter reads data from Radx-supported format files, runs a filter on specified fields, and writes out the results.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "THREADING FOR SPEED.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to use multiple compute threads to improve performance.";
  p_help = "The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.";
} use_multiple_threads;

paramdef int {
  p_default = 4;
  p_min = 1;
  p_descr = "The number of compute threads.";
  p_help = "The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.";
} n_compute_threads;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = FILELIST;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays taken while the antenna was in transition.";
  p_help = "If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.";
} remove_rays_with_antenna_transitions;

paramdef int {
  p_default = 0;
  p_descr = "Number of transition rays to include as a margin";
  p_help =  "Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.";
} transition_nrays_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "Only read sweeps within the specified sweep number limits.";
} set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} upper_sweep_num;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "SPECIFYING THE FIELDS TO BE READ IN";
  p_text = "By default, all fields will be read.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to select the fields for interpolation.";
  p_help = "If FALSE, all fields will be processed.";
} select_fields;

typedef struct {
  string input_name;
  boolean process_this_field;
} select_field_t;

paramdef struct select_field_t {
  p_default = { 
    { "DBZ", TRUE },
    { "VEL", TRUE },
    { "WIDTH", TRUE }
  };
  p_descr = "Select the list of fields to be processed.";
  p_help = "Only applies if 'select_fields' is TRUE.";
} selected_fields[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to rename some or all of the fields.";
  p_help = "If FALSE, no fields will be renamed.";
} rename_fields;

typedef struct {
  string input_name;
  string output_name;
} rename_field_t;

paramdef struct rename_field_t {
  p_default = { 
    { "DBZ", "DBZ_FILT" },
    { "VEL", "VEL_FILT" },
    { "WIDTH", "WIDTH_FILT" }
  };
  p_descr = "Specify the list of fields to be renamed.";
  p_help = "Only applies if 'rename_fields' is TRUE. The field is changed from input_name to output_name.";
} renamed_fields[];

commentdef {
  p_header = "FILTER DETAILS";
  p_text = "Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.";
}

typedef enum {
  FILTER_MEDIAN, FILTER_TRIANGULAR, FILTER_LEAST_SQUARES, FILTER_NONE
} filter_type_t;

typedef struct {
  string partial_field_name;
  filter_type_t filter_type;
  int length;
} field_filter_t;

paramdef struct field_filter_t {
  p_default = {
    {
      partial_field_name = "",
      filter_type = FILTER_NONE,
      length = 5
    }
  };
  p_descr = "Specify the filter to be applied to selected fields.";
  p_help = "\n(a) partial_field_name: this is treated as a search string. We loop through all of the fields in the data. If the partial_field_name is contained in the data field_name, we apply the specified filter to that field. If more than one partial_field_name matches, we use the first one specified.\n\n(b) filter_types - these are all applied along range:\n    NONE - do nothing.\n    MEDIAN - median filter.\n    TRIANGULAR - a weighted filter in which the weights drop off from the center gate in a linear manner.\n    LEAST_SQUARES - linear least squares fit.\n\n(c) length: the number of gates over which the filter is applied. This should be an odd number, so that the gate at which the filtered value is computed is in the center of the range.";
} field_filters[];

commentdef {
  p_header = "OPTION TO OVERRIDE THE NYQUIST VELOCITY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override nyquist velocity in incoming data.";
  p_help = "If true, the nyquist_velocity parameter is used to specify the nyquist. If false, the nyquist is computed from the incoming radar data stream. The nyquist is used for velocity interpolation, to ensure that folded values are treated correctlty.";
} override_nyquist;

paramdef double {
  p_default = 25.0;
  p_descr = "Specify nyquist velocity (m/s).";
  p_help = "See 'override_nyquist'.";
} nyquist_velocity;

commentdef {
  p_header = "OPTION TO SET FOLDING LIMITS ON A PER FIELD BASIS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set the folding limits for individual fields.";
  p_descr = "If TRUE, fold limits will be set for the specified fields. You should do this for fields such as VELOCITY and PHIDP. Some CfRadial files already contain the fold limits as attributes on the field. You only need to specify the limits if the file does not already have these attributes. The field_folds parameter can also be set to FALSE to override an attribute set in the data file.";
} set_fold_limits;

typedef struct {
  string input_name;
  boolean field_folds;
  boolean use_global_nyquist;
  double fold_limit_lower;
  double fold_limit_upper;
} fold_field_t;

paramdef struct fold_field_t {
  p_default = {
    {
      input_name = "VEL",
      field_folds = TRUE,
      use_global_nyquist = TRUE,
      fold_limit_lower = -25.0,
      fold_limit_upper = 25.0
    }
  };
  p_descr = "Use this to set the fold limits for a particular field.";
  p_help = "If this is specified, the interpolation for this field will be performed 'on the circle' so that folding is handled correctly. If use_global_nyquist_velocity is true, the fold limits are set to plus and minus the main nyquist velocity. If false, the specified fold limits are used instead.";
} folded_fields[];

commentdef {
  p_header = "OUTPUT FILE FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

commentdef {
  p_header = "OPTION TO OVERRIDE MISSING VALUES";
  p_text = "Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for meta-data";
  p_help = "See following parameter options.";
} override_missing_metadata_values;

paramdef double {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type double.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_double;

paramdef float {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type float.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_float;

paramdef int {
  p_default = -9999;
  p_descr = "Missing value for metadata of type int.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_int;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for metadata of type char.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_char;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for field data";
  p_help = "See following parameter options.";
} override_missing_field_values;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 64-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl64;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 32-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl32;

paramdef int {
  p_default = -2147483647;
  p_descr = "Missing value for field data of type 32-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si32;

paramdef int {
  p_default = -232768;
  p_descr = "Missing value for field data of type 16-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si16;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for field data of type 8-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si08;

