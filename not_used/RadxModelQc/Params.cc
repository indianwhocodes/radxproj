// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxModelQc
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxModelQc");
    tt->comment_text = tdrpStrDup("Parameters for data filtering for Radx format input data to produce quality control measures");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("Filters to apply");
    tt->comment_text = tdrpStrDup("The filters to apply, in order applied. A brief description of each filter is:\n \nAZ_GRADIENT = Compute gradient azimuthally at each point\nCLUTTER_2D_QUAL = Compute quality factor based on clutter\nCOMMENT = Non filter that just prints out 'input field' as a comment followeed by a more extensive message\nGAUSSIAN_2D_REMAP = Map 2 variables to a gaussian result\nGRIDDED_MATH = Do math operations pointwise using 2 grids\nMASK = change data when mask has particular value\nMATH = Do mathematical operations on each data point\nPASSTHROUGH = Set the output equal to the input, with a name change\nQSCALE = Scaling filter r.e. (exp(-.69*(values))\nSW_NORM = Spectrum width normalization\nTHRESH = Threshold filter, do something to data outside a threshold val\nThe parameters for each filter are found in arrays, one array per filter type, later in this file\n");
    tt++;
    
    // Parameter 'filter'
    // ctype is '_data_filter_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("filter");
    tt->descr = tdrpStrDup("Filters to apply");
    tt->help = tdrpStrDup("filter = The filter to apply\nfilter_index = index into an array of params for that filter type (found below)\ninput_field = name of input field to the filter, could be input to app, or output of an upstream filter\noutput_field = name of output field to the filter\noutput_units = name of output field to the filter (empty to pass through input as is)\noutput_missing = new output missing value (when output_units is not empty)\nwrite_output_field=TRUE to write output field, FALSE to keep it only as a passthrough to downstream filters\n");
    tt->array_offset = (char *) &_filter - &_start_;
    tt->array_n_offset = (char *) &filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(data_filter_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("data_filter_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("filter_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("filter");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_filter->filter - (char *) _filter;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("filter_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("AZ_GRADIENT");
        tt->struct_def.fields[0].enum_def.fields[0].val = AZ_GRADIENT;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("CLUTTER_2D_QUAL");
        tt->struct_def.fields[0].enum_def.fields[1].val = CLUTTER_2D_QUAL;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("COMMENT");
        tt->struct_def.fields[0].enum_def.fields[2].val = COMMENT;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("GAUSSIAN_2D_REMAP");
        tt->struct_def.fields[0].enum_def.fields[3].val = GAUSSIAN_2D_REMAP;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("GRIDDED_MATH");
        tt->struct_def.fields[0].enum_def.fields[4].val = GRIDDED_MATH;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("MASK");
        tt->struct_def.fields[0].enum_def.fields[5].val = MASK;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("MATH");
        tt->struct_def.fields[0].enum_def.fields[6].val = MATH;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("PASSTHROUGH");
        tt->struct_def.fields[0].enum_def.fields[7].val = PASSTHROUGH;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("QSCALE");
        tt->struct_def.fields[0].enum_def.fields[8].val = QSCALE;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SW_NORM");
        tt->struct_def.fields[0].enum_def.fields[9].val = SW_NORM;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("THRESH");
        tt->struct_def.fields[0].enum_def.fields[10].val = THRESH;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("filter_index");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_filter->filter_index - (char *) _filter;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("input_field");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_filter->input_field - (char *) _filter;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("output_field");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_filter->output_field - (char *) _filter;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_filter->output_units - (char *) _filter;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("output_missing");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_filter->output_missing - (char *) _filter;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("write_output_field");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_filter->write_output_field - (char *) _filter;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_math'
    // ctype is '_math_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_math");
    tt->descr = tdrpStrDup("MATH and AZ_GRADIENT params");
    tt->help = tdrpStrDup("replace values by doing math operations at each point (for AZ_GRADIENT, prior to doing the actual AZ_GRADIENT)\ntype = what to do\nvalue = how much\n for example type=ADD and value=7 means add 7 to each point\n");
    tt->array_offset = (char *) &_parm_math - &_start_;
    tt->array_n_offset = (char *) &parm_math_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(math_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("math_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("math_e");
      tt->struct_def.fields[0].fname = tdrpStrDup("type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_math->type - (char *) _parm_math;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("math_e");
        tt->struct_def.fields[0].enum_def.nfields = 4;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("MULT");
        tt->struct_def.fields[0].enum_def.fields[0].val = MULT;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("ADD");
        tt->struct_def.fields[0].enum_def.fields[1].val = ADD;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("SUBTRACT");
        tt->struct_def.fields[0].enum_def.fields[2].val = SUBTRACT;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("NOOP");
        tt->struct_def.fields[0].enum_def.fields[3].val = NOOP;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("value");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_math->value - (char *) _parm_math;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_clutter_2d_qual'
    // ctype is '_clutter_2d_qual_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_clutter_2d_qual");
    tt->descr = tdrpStrDup("CLUTTER_2D_QUAL params");
    tt->help = tdrpStrDup("\nvel_field_name = Input velocity field name\nwidth_field_name = Input spectrum width field name\ncmdflag_field_name = input cmdflag field name\nsw_shape_factor = param\nvr_shape_factor = param\nMain input is 'fscr'.  Output is 'fclut'.\n fvrsw = (1 - exp(-.69*(|vel|*vr_shape_factor + width*sw_shape_factor)))\n fclut = fvrsw*fcsr\n fclut(cmdFlag < 0.5) = 1");
    tt->array_offset = (char *) &_parm_clutter_2d_qual - &_start_;
    tt->array_n_offset = (char *) &parm_clutter_2d_qual_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(clutter_2d_qual_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("clutter_2d_qual_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("vel_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_clutter_2d_qual->vel_field_name - (char *) _parm_clutter_2d_qual;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("width_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_clutter_2d_qual->width_field_name - (char *) _parm_clutter_2d_qual;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("cmdflag_field_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_clutter_2d_qual->cmdflag_field_name - (char *) _parm_clutter_2d_qual;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("sw_shape_factor");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_clutter_2d_qual->sw_shape_factor - (char *) _parm_clutter_2d_qual;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("vr_shape_factor");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_parm_clutter_2d_qual->vr_shape_factor - (char *) _parm_clutter_2d_qual;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_comment'
    // ctype is '_comment_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_comment");
    tt->descr = tdrpStrDup("COMMENT params");
    tt->help = tdrpStrDup("Print out a comment\ncomment = the comment");
    tt->array_offset = (char *) &_parm_comment - &_start_;
    tt->array_n_offset = (char *) &parm_comment_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(comment_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("comment_t");
    tt->struct_def.nfields = 1;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("comment");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_comment->comment - (char *) _parm_comment;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_2d_gaussian_mapping'
    // ctype is '_gaussian_2d_mapping_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_2d_gaussian_mapping");
    tt->descr = tdrpStrDup("GAUSSIAN_2D_REMAP params");
    tt->help = tdrpStrDup("the main input is the 'X' variable, the y_field_name is the 'Y' variable, and the mapping is f(x,y) = 1.0 - exp(-scale*(x*xfactor + y*yfactor)), where x and y may or may not be absolute values of input based on the the x_is_absolute and y_is_absolute settings");
    tt->array_offset = (char *) &_parm_2d_gaussian_mapping - &_start_;
    tt->array_n_offset = (char *) &parm_2d_gaussian_mapping_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(gaussian_2d_mapping_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("gaussian_2d_mapping_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("y_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->y_field_name - (char *) _parm_2d_gaussian_mapping;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("x_factor");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->x_factor - (char *) _parm_2d_gaussian_mapping;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("y_factor");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->y_factor - (char *) _parm_2d_gaussian_mapping;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("x_is_absolute");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->x_is_absolute - (char *) _parm_2d_gaussian_mapping;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("y_is_absolute");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->y_is_absolute - (char *) _parm_2d_gaussian_mapping;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("scale");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_parm_2d_gaussian_mapping->scale - (char *) _parm_2d_gaussian_mapping;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_gridded_math'
    // ctype is '_gridded_math_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_gridded_math");
    tt->descr = tdrpStrDup("GRIDDED_MATH params");
    tt->help = tdrpStrDup("replace values by doing pointwise math operations at each point\ntype = what to do\ninput = other grid name\n for example type=ADD, means add main input and input at each point");
    tt->array_offset = (char *) &_parm_gridded_math - &_start_;
    tt->array_n_offset = (char *) &parm_gridded_math_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(gridded_math_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("gridded_math_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("math_e");
      tt->struct_def.fields[0].fname = tdrpStrDup("type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_gridded_math->type - (char *) _parm_gridded_math;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("math_e");
        tt->struct_def.fields[0].enum_def.nfields = 4;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("MULT");
        tt->struct_def.fields[0].enum_def.fields[0].val = MULT;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("ADD");
        tt->struct_def.fields[0].enum_def.fields[1].val = ADD;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("SUBTRACT");
        tt->struct_def.fields[0].enum_def.fields[2].val = SUBTRACT;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("NOOP");
        tt->struct_def.fields[0].enum_def.fields[3].val = NOOP;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("input");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_gridded_math->input - (char *) _parm_gridded_math;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_mask'
    // ctype is '_mask_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_mask");
    tt->descr = tdrpStrDup("MASK params");
    tt->help = tdrpStrDup("when mask is within threshold (or missing), replace values in data\nmask_field_name =  name of input variable to use as mask\ntype = threshold test to do\nmask_threshold = threshold value\ndata_replacement_value = Value to replace with in data");
    tt->array_offset = (char *) &_parm_mask - &_start_;
    tt->array_n_offset = (char *) &parm_mask_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mask_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("mask_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("mask_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_mask->mask_field_name - (char *) _parm_mask;
      tt->struct_def.fields[1].ftype = tdrpStrDup("thresh_e");
      tt->struct_def.fields[1].fname = tdrpStrDup("type");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_mask->type - (char *) _parm_mask;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("thresh_e");
        tt->struct_def.fields[1].enum_def.nfields = 5;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("LESS");
        tt->struct_def.fields[1].enum_def.fields[0].val = LESS;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("LESS_OR_EQUAL");
        tt->struct_def.fields[1].enum_def.fields[1].val = LESS_OR_EQUAL;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("GREATER");
        tt->struct_def.fields[1].enum_def.fields[2].val = GREATER;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("GREATER_OR_EQUAL");
        tt->struct_def.fields[1].enum_def.fields[3].val = GREATER_OR_EQUAL;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("MISSING");
        tt->struct_def.fields[1].enum_def.fields[4].val = MISSING;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("mask_threshold");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_mask->mask_threshold - (char *) _parm_mask;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("data_replacement_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_mask->data_replacement_value - (char *) _parm_mask;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("replace_with_missing");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_parm_mask->replace_with_missing - (char *) _parm_mask;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_dummy'
    // ctype is '_dummy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_dummy");
    tt->descr = tdrpStrDup("params for filters with no params");
    tt->help = tdrpStrDup("dummy    = placeholder. \nfilts with no parms: PASSTHROUGH");
    tt->array_offset = (char *) &_parm_dummy - &_start_;
    tt->array_n_offset = (char *) &parm_dummy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(dummy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("dummy_t");
    tt->struct_def.nfields = 1;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("dummy");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_dummy->dummy - (char *) _parm_dummy;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_qscale'
    // ctype is '_qscale_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_qscale");
    tt->descr = tdrpStrDup("QSCALE params");
    tt->help = tdrpStrDup("replace values V at all points with scaled value:\n exp(-scale*(V/topv - lowv/topv)^2)    (invert = false)\n 1 - exp(-scale*(V/topv - lowv/topv)^2)    (invert = true)\n");
    tt->array_offset = (char *) &_parm_qscale - &_start_;
    tt->array_n_offset = (char *) &parm_qscale_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(qscale_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("qscale_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_qscale->scale - (char *) _parm_qscale;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("topv");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_qscale->topv - (char *) _parm_qscale;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("lowv");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_qscale->lowv - (char *) _parm_qscale;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("invert");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_qscale->invert - (char *) _parm_qscale;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_sw_norm'
    // ctype is '_sw_norm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_sw_norm");
    tt->descr = tdrpStrDup("SW_NORM params");
    tt->help = tdrpStrDup("compute normalized spectrum width, using width field input W\ndbz = TRUE for DBZ, FALSE for VR\nlambda = constant\n dwell = mean(prt)*mean(n_samples)\n Mi = 4*sqrt(pi)*W*W*dwell/lambda\n If dbz=true    output = 10*log10(1+sqrt(1/Mi))\n If dbz = false  output= W*lambda/(8*dwell*sqrt(pi))");
    tt->array_offset = (char *) &_parm_sw_norm - &_start_;
    tt->array_n_offset = (char *) &parm_sw_norm_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(sw_norm_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("sw_norm_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("dbz");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_sw_norm->dbz - (char *) _parm_sw_norm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lambda");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_sw_norm->lambda - (char *) _parm_sw_norm;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_thresh'
    // ctype is '_thresh_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_thresh");
    tt->descr = tdrpStrDup("THRESH params");
    tt->help = tdrpStrDup("replace values when within threshold with replacement\ntype = threshold test to do\nthreshold = threshold  value \nreplacement = replacement value when test satisfied\nreplace_with_missing = true to ignore replacement value and replace with missing value when test satisfied\n");
    tt->array_offset = (char *) &_parm_thresh - &_start_;
    tt->array_n_offset = (char *) &parm_thresh_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(thresh_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("thresh_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("thresh_e");
      tt->struct_def.fields[0].fname = tdrpStrDup("type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_thresh->type - (char *) _parm_thresh;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("thresh_e");
        tt->struct_def.fields[0].enum_def.nfields = 5;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("LESS");
        tt->struct_def.fields[0].enum_def.fields[0].val = LESS;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("LESS_OR_EQUAL");
        tt->struct_def.fields[0].enum_def.fields[1].val = LESS_OR_EQUAL;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("GREATER");
        tt->struct_def.fields[0].enum_def.fields[2].val = GREATER;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("GREATER_OR_EQUAL");
        tt->struct_def.fields[0].enum_def.fields[3].val = GREATER_OR_EQUAL;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("MISSING");
        tt->struct_def.fields[0].enum_def.fields[4].val = MISSING;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("threshold");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_thresh->threshold - (char *) _parm_thresh;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("replacement");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_thresh->replacement - (char *) _parm_thresh;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("replace_with_missing");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_thresh->replace_with_missing - (char *) _parm_thresh;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
